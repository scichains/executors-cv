{
  "app": "executor",
  "version": "0.0.1",
  "category": "matrices.morphology",
  "name": "Strict morphology",
  "tags": [
    "matrices"
  ],
  "id": "3fd6043d-1fda-4c75-b1fa-dd1d5f02c7f4",
  "language": "java",
  "java": {
    "class": "net.algart.executors.modules.cv.matrices.morphology.StrictMorphology"
  },
  "in_ports": [
    {
      "value_type": "mat",
      "name": "input"
    },
    {
      "value_type": "mat",
      "name": "mask",
      "hint": "[Optional] If specified, this matrix is combined with the result of operation by MIN operation.\nIn particular, if this matrix is binary, it means that all its zero pixels will be cleared in the result matrix."
    }
  ],
  "out_ports": [
    {
      "value_type": "mat",
      "name": "output"
    }
  ],
  "controls": [
    {
      "name": "operation",
      "caption": "Morphology operation",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "DILATION",
          "caption": "dilation"
        },
        {
          "value": "EROSION",
          "caption": "erosion"
        },
        {
          "value": "CLOSING",
          "caption": "closing (remove dark small or thin objects: dilation(erosion(A)))"
        },
        {
          "value": "OPENING",
          "caption": "opening (remove light small or thin objects: erosion(dilation(A)))"
        },
        {
          "value": "WEAK_DILATION",
          "caption": "weak dilation (dilation(A) − (closing(A)−A))"
        },
        {
          "value": "WEAK_EROSION",
          "caption": "weak erosion (erosion(A) + (A-opening(A)))"
        },
        {
          "value": "WEAK_CLOSING",
          "caption": "weak closing (remove dark small particles)"
        },
        {
          "value": "WEAK_OPENING",
          "caption": "weak opening (remove light small particles)"
        },
        {
          "value": "EXTERNAL_GRADIENT",
          "caption": "external gradient (dilation(A) − A)"
        },
        {
          "value": "INTERNAL_GRADIENT",
          "caption": "internal gradient (A − erosion(A))"
        },
        {
          "value": "BLACK_HAT",
          "caption": "black hat (dark small or thin objects: closing(A) − A)"
        },
        {
          "value": "TOP_HAT",
          "caption": "top hat (light small or thin objects: A − opening(A))"
        },
        {
          "value": "CRATERS",
          "caption": "craters (dark small particles)"
        },
        {
          "value": "PEAKS",
          "caption": "peaks (light small particles)"
        },
        {
          "value": "BEUCHER_GRADIENT",
          "caption": "Beucher gradient (dilation(A) − erosion(A))"
        }
      ],
      "default": "DILATION"
    },
    {
      "name": "shape",
      "caption": "Pattern shape",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "SPHERE",
          "caption": "2D circle / 3D sphere / 1D segment..."
        },
        {
          "value": "CUBE",
          "caption": "2D square / 3D cube / 1D segment..."
        }
      ],
      "default": "SPHERE",
      "suppress_warnings": ["no_setter"]
    },
    {
      "name": "patternSize",
      "caption": "Pattern size (diameter)",
      "value_type": "int",
      "edition_type": "value",
      "default": 15
    },
    {
      "name": "customPatternSpecification",
      "caption": "Custom pattern specification",
      "description": "If specified, overrides pattern shape and size. Example: \"rect 300 100 0 0\", \"circle 30\" etc.\nOne of possible formats: binary matrix NxM of digits 0 and 1 (probably with spaces, they are ignored and removed), where 1 means a point of pattern and the coordinate origin is located at the element (⌊N/2⌋, ⌊M/2⌋) of the matrix.",
      "value_type": "String",
      "edition_type": "value",
      "multiline": true,
      "default": ""
    },
    {
      "name": "optimizeSpeedForLargePatterns",
      "caption": "Optimize speed for large patterns",
      "description": "If true, large round patterns will be not ideally exact, but processing will be faster",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true
    },
    {
      "caption": "Continuation mode",
      "name": "continuationMode",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "DEFAULT",
          "caption": "default (pseudo-cyclic)"
        },
        {
          "value": "CYCLIC",
          "caption": "cyclic"
        },
        {
          "value": "MIRROR_CYCLIC",
          "caption": "mirror-cyclic"
        },
        {
          "value": "ZERO_CONSTANT",
          "caption": "0"
        },
        {
          "value": "POSITIVE_INFINITY",
          "caption": "+∞"
        },
        {
          "value": "NEGATIVE_INFINITY",
          "caption": "−∞"
        },
        {
          "value": "NAN_CONSTANT",
          "caption": "NaN"
        }
      ],
      "default": "DEFAULT"
    },
    {
      "name": "invertSource",
      "caption": "Invert source matrix",
      "description": "If true, the source matrix is inverted, i.e. this function performs the operation over negative image. For non-binary matrices, \"inversion\" means replacing every element v with max−v. where \"max\" corresponds to white color (1.0 for floating-point matrices, 255 for byte, 65535 for short, 2³¹−1 for int type).",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    }
  ]
}