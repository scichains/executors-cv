{
  "app": "executor",
  "version": "0.0.1",
  "category": "algart.matrices.objects.binary.components",
  "name": "Smart dilating binary objects",
  "description": "Lets <b>A</b> = \"surely\" (pixels that surely belong to the objects), <b>B</b> = \"maybe\" (pixels with less probability to be objects), <b>C</b> = \"unlikely\" (pixels, that are background with high probability).\n<ul><li>We find <b>H</b> (hysteresis): objects on <b>B</b> connected with <b>A</b>, including pixels of the matrix <b>A</b> itself (<b>H</b>⊃<b>A</b>).</li><li>Then we find <b>R</b> = (dilation of <b>A</b>) <i>AND</i> <b>H</b>: pixels in <b>H</b>, which are not too far from <b>A</b>.<br>We call this operation \"smart dilation\": it can be considered as dilating of the matrix <b>A</b> \"inside\" the matrix <b>B</b>, but only withing connected components of the union <b>A</b>∪<b>B</b>.</li><li>Then, if <b>C</b> is set, we replace <b>R</b> = <b>R</b> <i>AND NOT</i> (erosion of <b>C</b>): pixels in <b>R</b>, that are deeply inside \"unlikely\" areas <b>C</b> (\"deeply\" according to erosion pattern), are removed.</li><li>The we return <b>R</b> = <b>R</b> <i>OR</i> <b>A</b>: pixels, belonging to original <b>A</b>, are never removed.</li></ul><p>All source matrices are binary.",
  "id": "0993bb33-f3aa-46b8-9393-8644c9b83db8",
  "language": "java",
  "java": {
    "class": "net.algart.executors.modules.cv.matrices.objects.binary.components.SmartDilatingObjects"
  },
  "in_ports": [
    {
      "value_type": "mat",
      "name": "surely",
      "hint": "Pixels that surely belong to objects (binary matrix)."
    },
    {
      "value_type": "mat",
      "name": "maybe",
      "hint": "Pixels that maybe belong to objects, but maybe not (binary matrix)."
    },
    {
      "value_type": "mat",
      "name": "unlikely",
      "hint": "[Optional] Areas that are very unlikely to belong to the result;\npixels deeply inside such areas are surely background and will be zero in the result (binary matrix)."
    }
  ],
  "out_ports": [
    {
      "value_type": "mat",
      "name": "output"
    }
  ],
  "controls": [
    {
      "name": "surelyDilationShape",
      "caption": "Shape for dilating \"surely\"",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "SPHERE",
          "caption": "circle"
        },
        {
          "value": "CUBE",
          "caption": "square"
        }
      ],
      "default": "SPHERE"
    },
    {
      "name": "surelyDilationSize",
      "caption": "Size of the previous pattern",
      "value_type": "int",
      "edition_type": "value",
      "default": 11
    },
    {
      "name": "surelyCustomPatternSpecification",
      "caption": "Custom specification of the previous pattern",
      "description": "(May be empty, then it is skipped.)\n\nFirst of all, \"surely\" matrix A is dilated by this pattern. It is usual, not smart dilation yet.\nThen the result of dilation is combined with H (hysteresis): objects on \"maybe\" matrix B, connected with A (including pixels of the matrix A itself: H⊃A).\nSo, we find \nR = (dilation of A) AND H:\npixels in H, which are not too far from A.\nNote that pixels, belonging to original A, are never removed.\nSee description of this function in the help.",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "name": "unlikelyErosionShape",
      "caption": "Shape for eroding \"unlikely\"",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "SPHERE",
          "caption": "circle"
        },
        {
          "value": "CUBE",
          "caption": "square"
        }
      ],
      "default": "SPHERE"
    },
    {
      "name": "unlikelyErosionSize",
      "caption": "Size of the previous pattern",
      "value_type": "int",
      "edition_type": "value",
      "default": 31
    },
    {
      "name": "unlikelyCustomPatternSpecification",
      "caption": "Custom specification of the previous pattern",
      "description": "(May be empty, then it is skipped.)\n\nIf \"unlikely\" matrix C is specified, it is eroded by this pattern: this erosion consists of pixels, lying deeply \"unlikely\" areas, and can be considered as \"surely background\". Then this \"surely background\" is subtracted from the previous matrix R:\nR = (R AND NOT (erosion of C)) OR A.\n(But pixels, belonging to original A, are never removed.)\nSee description of this function in the help.",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    }
  ]
}